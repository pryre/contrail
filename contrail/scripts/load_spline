#!/usr/bin/env python2

import sys
from math import *

import rospy
from contrail_msgs.msg import CubicSpline

global pub_s
global timer

def timer_callback(e):
	global pub_s
	global timer

	if e.current_real > rospy.Time(0):
		if( rospy.has_param("~spline/k0/t") and \
			rospy.has_param("~spline/k0/x") and \
			rospy.has_param("~spline/k0/y") and \
			rospy.has_param("~spline/k0/z") and \
			rospy.has_param("~spline/k0/yaw") ):

			#if( rospy.get_param("~spline/k0/t") != 0.0 ):
			#	rospy.logerr("First knot must have t=0.0")
			#	rospy.signal_shutdown("Error: bad time point")
			#	return


			msg_out = CubicSpline()
			msg_out.header.frame_id = rospy.get_param("~frame_id", "map")
			msg_out.header.stamp = e.current_real
			msg_out.start_time = rospy.Time.from_sec(0.0)

			i = 0
			while( rospy.has_param("~spline/k%i/t" % (i)) and \
				   rospy.has_param("~spline/k%i/x" % (i)) and \
				   rospy.has_param("~spline/k%i/y" % (i)) and \
				   rospy.has_param("~spline/k%i/z" % (i)) and \
				   rospy.has_param("~spline/k%i/yaw" % (i)) ):

				msg_out.t.append(rospy.Time.from_sec(rospy.get_param("~spline/k%i/t" % (i))))
				msg_out.x.append(rospy.get_param("~spline/k%i/x" % (i)))
				msg_out.y.append(rospy.get_param("~spline/k%i/y" % (i)))
				msg_out.z.append(rospy.get_param("~spline/k%i/z" % (i)))
				msg_out.yaw.append(rospy.get_param("~spline/k%i/yaw" % (i)))

				i += 1

			rospy.loginfo("Loaded %i spline knots" % (i))

			pub_s.publish(msg_out)
			timer.shutdown()
		else:
			rospy.logerr("Unable to locate spline parameters")
			rospy.signal_shutdown("Error: no spline")
			return

def waypoint_pub():
	global timer
	global pub_s
	rospy.init_node('load_spline', anonymous=True)
	pub_s = rospy.Publisher('spline', CubicSpline, queue_size=10, latch=True)

	rospy.loginfo("Loading spline from parameters...")
	timer = rospy.Timer(rospy.Duration(1.0/50.0), timer_callback)

	rospy.spin()

if __name__ == '__main__':
	try:
		waypoint_pub()
	except rospy.ROSInterruptException:
		pass
