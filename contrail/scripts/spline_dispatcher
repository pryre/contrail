#!/usr/bin/env python2

import sys
from math import *

import roslib
roslib.load_manifest('contrail')
import rospy
import actionlib

import contrail.waypoint_helper as wph
from contrail.msg import TrajectoryAction, TrajectoryGoal

global timer

def timer_callback(e):
	global timer

	if e.current_real > rospy.Time(0):
		if rospy.has_param("~duration"):
			movement_duration = rospy.Duration.from_sec(rospy.get_param("~duration"))
			success, wps = wph.load_waypoints()

			if success and (len(wps) >= 2):
				rospy.loginfo("Loaded %i waypoints for the base" % (len(wps)))
				action_topic = rospy.get_param("~action_topic", 'contrail')

				# Wait for the action clients to come online
				rospy.loginfo("Waiting for contrail action client")
				client_base = actionlib.SimpleActionClient(action_topic, TrajectoryAction)
				client_base.wait_for_server()

				if not rospy.is_shutdown():
					# Prepare the spline interpolation points
					rospy.loginfo("Continuous spline:")

					goal_base = TrajectoryGoal()
					goal_base.duration = movement_duration
					goal_base.positions = []
					goal_base.yaws = []
					for i in range(len(wps)):
						goal_base.positions.append(wps[i].position)
						goal_base.yaws.append(wps[i].yaw)

					# Do some formatted logging to console
					datalog_names = ["Base_Px","Base_Py","Base_Pz","Base_Rz"]
					datalog = []
					datalog_px = []
					datalog_py = []
					datalog_pz = []

					for i in range(len(goal_base.positions)):
						datalog_px.append(goal_base.positions[i].x)
						datalog_py.append(goal_base.positions[i].y)
						datalog_pz.append(goal_base.positions[i].z)

					datalog.append(datalog_px)
					datalog.append(datalog_py)
					datalog.append(datalog_pz)
					datalog.append(goal_base.yaws)

					format_title = ""
					format_row = ""
					for i in range(len(datalog_names)):
						format_title += '%' + str(len(datalog_names[i])) + 's '
						format_row += '%' + str(len(datalog_names[i])) + '.4f '

					rospy.loginfo(format_title % tuple(datalog_names))
					for i in range(len(wps)):
						row = []
						for d in range(len(datalog)):
							row.append(datalog[d][i])
						rospy.loginfo(format_row % tuple(row))

					# Prepare the starting time of the action
					goal_base.start = rospy.Time.now() + rospy.Duration.from_sec(2)
					
					client_base.send_goal(goal_base)
					client_base.wait_for_result()

					# Graceful shutdown if all is successful
					if not rospy.is_shutdown():
						timer.shutdown()
						rospy.signal_shutdown("Continuous spline plan complete!")
			else:
				if not success:
					rospy.logerr("Unable to locate spline parameters")
					rospy.signal_shutdown("Error: no spline")
				else:
					rospy.logerr("Not enough spline points were been loaded (%i)" % len(wps))
					rospy.signal_shutdown("Error: <2 spline points")
		else:
			rospy.logerr("Unable to locate duration parameter")
			rospy.signal_shutdown("Error: no duration")

def waypoint_pub():
	global timer
	global pub_wpl
	rospy.init_node('continuous_dispatcher', anonymous=True)

	rospy.loginfo("Loading continuous plan dispatcher...")
	timer = rospy.Timer(rospy.Duration(1.0/50.0), timer_callback)

	rospy.spin()

if __name__ == '__main__':
	try:
		waypoint_pub()
	except rospy.ROSInterruptException:
		pass
